knitr::opts_knit$set(root.dir = 'C:/Users/flick/Documents/Github/singlish/')
knitr::opts_chunk$set(fig.width=14, warning = FALSE)
# load packages
library(tidyverse)
library(lmerTest)
library(lme4)
library(regclass)
library(car)
library(ggsignif)
library(mgcv)
library(gamm4)
library(itsadug)
library(ggplot2)
library(sjPlot)
theme_set(theme_bw())
# load data
df.singlish <- read.csv("data/data.csv") # full data frame
df.singlish$id <- as.factor(df.singlish$id)
df.singlish$speaker <- as.factor(df.singlish$speaker)
df.singlish$clip <- as.factor(df.singlish$clip)
# load more data!
df.singlish_proportion <- read.csv("data/data_proportion.csv") # data, but with proportions instead of binary choice data
df.singlish_ones <- read.csv("data/data_ones.csv") # only data from clips which were chosen as the More Singlish clip
# raw proportion data
df.singlish_proportion %>%
ggplot(aes(x=reorder(clip,probability,na.rm=TRUE), y=probability, fill=speaker)) +
geom_boxplot(width=0.5) +
geom_point(size=0.5) +
labs(y="Proportion", x="Clip", fill="Talker") +
theme(axis.text.x = element_text(angle=90, vjust=0.5, hjust=1))
# scatter plot with Singlish scores on the y-axis instead
## force re-order the labels so that they align with the raw proportion data
df.singlish_proportion$clip <- factor(df.singlish_proportion$clip, levels=c('M3_01', 'M3_02', 'F2_02', 'M3_04', 'F2_01', 'M3_03', 'M5_01', 'F3_01', 'F2_04', 'F3_03', 'F3_04', 'M5_03', 'M5_02', 'M1_04', 'M5_04', 'F1_01', 'F4_01', 'F2_03', 'F4_04', 'M1_01', 'F5_03', 'F4_03', 'M1_03', 'M1_02', 'M4_01', 'F3_02', 'F5_01', 'F5_02', 'M4_03', 'F1_04', 'F4_02', 'F1_03', 'M2_02', 'F1_02', 'M4_04', 'F5_04', 'M4_02', 'M2_03', 'M2_04', 'M2_01'))
df.singlish_proportion %>%
ggplot(aes(x=clip, y=clip_score)) +
geom_line(color="black") +
geom_point(aes(fill=speaker), shape=21, size=2) +
labs(y="Singlish score", x="Clip", fill="Talker") +
theme(axis.text.x = element_text(angle=90, vjust=0.5, hjust=1))
tab <- table(df.singlish$clip, df.singlish$singlish) # create contingency table
chisq.test(df.singlish$clip, df.singlish$singlish, correct=FALSE) # chi-square test
df.rt_all <- df.singlish %>%
filter(!is.infinite(logRT)) %>%
filter(!is.na(singlish))
df.rt_all$id <- as.factor(df.rt_all$id)
df.rt_all$speaker <- as.factor(df.rt_all$speaker)
df.rt_all$clip <- as.factor(df.rt_all$clip)
tab.rt_all <- df.rt_all %>%
group_by(clip,clip_score,speaker) %>%
summarise(
n=n(),
mean=mean(as.numeric(logRT)),
sd=sd(as.numeric(logRT))
) %>%
mutate(se=sd/sqrt(n))  %>%
mutate(ic=se * qt((1-0.05)/2 + .5, n-1)) %>%
ungroup()
ggplot(tab.rt_all, aes(x=clip_score, y=mean, label=clip)) +
geom_point(aes(x=clip_score, y=mean, color=speaker), stat="identity") +
geom_smooth(method="gam", color="black") +
geom_text(size=3) +
geom_errorbar(aes(x=clip_score, ymin=mean-ic, ymax=mean+ic, color=speaker), width=0.0005, alpha=0.6, linewidth=0.7) +
labs(x="Singlish score", y="Log-transformed RT", color="Talker")
df.rt_ones <- df.singlish_ones %>%
filter(!is.infinite(logRT)) %>%
filter(!is.na(singlish))
df.rt_ones$id <- as.factor(df.rt_ones$id)
df.rt_ones$speaker <- as.factor(df.rt_ones$speaker)
df.rt_ones$clip <- as.factor(df.rt_ones$clip)
tab.rt_ones <- df.rt_ones %>%
group_by(clip,clip_score,speaker) %>%
summarise(
n=n(),
mean=mean(as.numeric(logRT)),
sd=sd(as.numeric(logRT))
) %>%
mutate(se=sd/sqrt(n)) %>%
mutate(ic=se * qt((1-0.05)/2 + .5, n-1)) %>%
ungroup()
ggplot(tab.rt_ones, aes(x=clip_score, y=mean, label=clip)) +
geom_point(aes(x=clip_score, y=mean, color=speaker), stat="identity") +
geom_smooth(method="gam", color = "black") +
geom_text(size=3) +
geom_errorbar(aes(x=clip_score, ymin=mean-ic, ymax=mean+ic, color=speaker), width=0.0005, alpha=0.6, linewidth=0.7) +
labs(x="Singlish score", y="Log-transformed RT", color="Talker")
m.rt_ones = lmer(logRT ~ clip_score + (1|speaker) + (1 + clip_score|id), data=df.rt_ones)
summary(m.rt_ones)
m.rt_all = gam(logRT ~ s(clip_score, bs="cr") + s(clip_score, id, bs="re") + s(speaker, bs="re"), data=df.rt_all, method="REML")
summary(m.rt_all)
plot(m.rt_all, select=1, shade=TRUE, shift=coef(m.rt_all)[1], ylim=c(5.6, 6.2), ylab="Log-transformed RT", xlab="Singlish score")
---
title: "..."
plot(m.rt_all, residuals=TRUE, shade=TRUE, rug=TRUE)
plot(m.rt_all, shade=TRUE, rug=TRUE)
plot.gam(m.rt_all, shade=TRUE, rug=TRUE)
plot.gam(m.rt_all, residuals=TRUE, shade=TRUE, rug=TRUE)
plot.gam(m.rt_all, shade=TRUE, rug=TRUE)
---
title: "..."
plot(m.rt_all, select=1, shade=TRUE, shift=coef(m.rt_all)[1], ylim=c(5.6, 6.2), ylab="Log-transformed RT", xlab="Singlish score", rug=TRUE)
plot(m.rt_all, select=1, shade=TRUE, shift=coef(m.rt_all)[1], ylim=c(5.6, 6.2), ylab="Log-transformed RT", xlab="Singlish score", rug=TRUE)
